#!/usr/bin/env python
#
# Copyright (c) 2009-2018 MontaVista Software, LLC.  All rights reserved.
#
# This file is licensed under the terms of the GNU General Public License 
# version 2. This program is licensed "as is" without any warranty of any 
# kind, whether express or implied.
#

from optparse import OptionParser, OptionGroup
import sys
from MVLContent.MVLContentTools import ContentTools, getUserFromPasswordManager, removeUserFromPasswordManager
import logging

def main():
      parser = OptionParser()
      parser.add_option("--username", dest="username", default=None, help="set username", metavar="<username>")
      parser.add_option("--password", dest="password", default=None, help="set password", metavar="<password>")
      parser.add_option("-d", "--debug", action="store_true", dest="isDebug", default=False, help="print debug messages")
      # parser all arguments
      (options,arguments) = parser.parse_args()

      # setup logger
      logger = logging.getLogger("git-credential-mvl")
      ch = logging.StreamHandler()
      formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
      ch.setFormatter(formatter)
      logger.addHandler(ch)

      if len(arguments) > 1:
         sys.stderr.write("Too many arguments")
      else:
         operation = arguments[0]
      #Set defaults
      protocol=None
      host=None
      username=None
      password=None
      # Parse input from git
      for line in sys.stdin.readlines():
          if line.startswith("protocol="):
             protocol = line.split("=")[1].strip()
          if line.startswith("host="):
             host = line.split("=")[1].strip()
          if line.startswith("password="):
             password = line.split("=")[1].strip()
          if line.startswith("username="):
             username = line.split("=")[1].strip()
      if protocol and host:
          options.uri="%s://%s" % (protocol, host) 
      else:
          sys.stderr.write("Didn't get host or protocol values\n")
          sys.exit(1)
      if username:
         options.username = username
      if password:
         options.password = password

      contentTools = ContentTools(options)
      user = getUserFromPasswordManager(logger)

      if operation == "get":
          if user:
             print("username={0}".format(user.getUsername()))
             print("password={0}".format(user.getPassword()))
      elif operation == "store":
          getUserFromPasswordManager(logger)
      elif operation == "erase":
          if user:
            removeUserFromPasswordManager(user,logger)
      else:
          print "Invalid git operation"

if __name__ == "__main__":
      main()

